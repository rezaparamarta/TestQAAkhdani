{"info":{"start":"2024-09-30T08:02:31.009Z","end":"2024-09-30T08:03:36.828Z","_duration":65819,"type":"runner","cid":"0-0","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"129.0.6668.60","chrome":{"chromedriverVersion":"129.0.6668.60 (c82bbfc83a46869153a82ee063df4a7ee9718f8d-refs/branch-heads/6668@{#1320})","userDataDir":"C:\\Users\\rezap\\AppData\\Local\\Temp\\scoped_dir15068_434958171"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:50068"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webSocketUrl":"ws://localhost:50063/session/1af219cdf54e617d147c4a3c2f8af743","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true,"wdio:driverPID":15068,"sessionId":"1af219cdf54e617d147c4a3c2f8af743"},"sanitizedCapabilities":"chrome.129_0_6668_60.windows","config":{"protocol":"http","hostname":"localhost","path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"binary":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","args":["--no-sandbox","--disable-dev-shm-usage"]},"webSocketUrl":true},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"cacheDir":"C:\\Users\\rezap\\AppData\\Local\\Temp","port":50063,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"binary":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","args":["--no-sandbox","--disable-dev-shm-usage"]}},"automationProtocol":"webdriver","baseUrl":"https://www.demoblaze.com","waitforInterval":500,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"D:\\TestQAAkhdani","specs":["./test/specs/demoTest.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec","html-nice"],"services":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"mochaOpts":{"timeout":60000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":[],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","ignoredWorkerServices":[]},"specs":["file:///D:/TestQAAkhdani/test/specs/demoTest.js"],"sessionId":"1af219cdf54e617d147c4a3c2f8af743","isMultiremote":false,"instanceOptions":{"1af219cdf54e617d147c4a3c2f8af743":{"protocol":"http","hostname":"localhost","path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"binary":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","args":["--no-sandbox","--disable-dev-shm-usage"]},"webSocketUrl":true},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"cacheDir":"C:\\Users\\rezap\\AppData\\Local\\Temp","port":50063,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"binary":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","args":["--no-sandbox","--disable-dev-shm-usage"]}},"automationProtocol":"webdriver","baseUrl":"https://www.demoblaze.com","waitforInterval":500,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"D:\\TestQAAkhdani","specs":["./test/specs/demoTest.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec","html-nice"],"services":[],"maxInstances":10,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"mochaOpts":{"timeout":60000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":[],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","ignoredWorkerServices":[]}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":11,"skipped":0,"failed":0,"duration":65819,"start":"2024-09-30T08:02:31.010Z","end":"2024-09-30T08:03:36Z"},"title":"Test Report Title","suites":[{"start":"2024-09-30T08:02:31.017Z","end":"2024-09-30T08:03:36.730Z","_duration":65712,"type":"suite:start","uid":"suite-0-0","cid":"0-0","file":"D:\\TestQAAkhdani\\test\\specs\\demoTest.js","title":"Sign up Page","fullTitle":"Sign up Page","tests":[{"start":"2024-09-30T08:02:31.017Z","end":"2024-09-30T08:02:37.252Z","_duration":6235,"type":"test","uid":"test-00-0","cid":"0-0","title":"Test Case 1 - Access the website and check the browser title","fullTitle":"Sign up Page.Test Case 1 - Access the website and check the browser title","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('https://www.demoblaze.com/');\r\n        \r\n        const title = await browser.getTitle();\r\n        console.log('The page title is:', title);  // Log the actual title for debugging\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:37.253Z","end":"2024-09-30T08:02:37.548Z","_duration":295,"type":"test","uid":"test-00-1","cid":"0-0","title":"Test Case 2 - Get the text of the navigation menu","fullTitle":"Sign up Page.Test Case 2 - Get the text of the navigation menu","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/');\r\n\r\n        const expectedLinks = [\r\n            'Home',\r\n            'Contact',\r\n            'About us',\r\n            'Cart',\r\n            'Log in',\r\n            'Sign up'\r\n        ];\r\n\r\n        const actualLinks = [];\r\n        const navlinks = await $$('.navbar-nav .nav-item a');\r\n        for (const link of navlinks) {\r\n            const text = await link.getText();\r\n            if (text.trim()) {  // Remove empty texts\r\n                actualLinks.push(text.trim().replace('(current)', '').trim());\r\n            }\r\n        }\r\n        \r\n        console.log('Actual Links:', actualLinks);\r\n        expect(actualLinks).toEqual(expectedLinks);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:37.549Z","end":"2024-09-30T08:02:41.412Z","_duration":3863,"type":"test","uid":"test-00-2","cid":"0-0","title":"Test Case 3 - Sign up with valid credentials and capture dialog","fullTitle":"Sign up Page.Test Case 3 - Sign up with valid credentials and capture dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/');\r\n    \r\n        const link = await $('#signin2');\r\n    \r\n        // Scroll to the element and ensure it is displayed and clickable\r\n        await link.scrollIntoView();\r\n        await link.waitForDisplayed({ timeout: 10000 });\r\n        \r\n        try {\r\n            await link.waitForClickable({ timeout: 10000 });\r\n            await link.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), link);\r\n        }\r\n    \r\n        const emailInput = await $('#sign-username');\r\n        const passwordInput = await $('#sign-password');\r\n    \r\n        // Generate a random username\r\n        const randomUsername = generateRandomUsername();\r\n        await emailInput.setValue(randomUsername); // Use random username\r\n        await passwordInput.setValue('12345678');\r\n    \r\n        // Locate the \"Sign up\" button in the modal\r\n        const signUpButton = await $('//button[contains(@onclick, \"register()\")]');\r\n    \r\n        // Ensure the \"Sign up\" button is clickable\r\n        await signUpButton.waitForClickable({ timeout: 10000 });\r\n    \r\n        // Click the \"Sign up\" button\r\n        await signUpButton.click();\r\n    \r\n        // Capture the success message from the modal (if it's a modal dialog)\r\n        const modalMessage = await $('div.modal-body').getText();\r\n        console.log('Modal Text:', modalMessage);\r\n    \r\n        // Assert the text (adjust the expectation based on actual success message)\r\n        expect(modalMessage).toContain('');  // Adjust this based on expected modal message\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:41.413Z","end":"2024-09-30T08:02:46.134Z","_duration":4721,"type":"test","uid":"test-00-3","cid":"0-0","title":"Test Case 4 - Log in with valid credentials and capture dialog","fullTitle":"Sign up Page.Test Case 4 - Log in with valid credentials and capture dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        await browser.url('/');\r\n    \r\n        const loginLink = await $('#login2');\r\n    \r\n        // Wait for the element to be displayed and clickable\r\n        await loginLink.waitForDisplayed({ timeout: 10000 });\r\n        await loginLink.scrollIntoView();\r\n    \r\n        // Sometimes images or other elements may be blocking the login link, so execute a JS click if necessary\r\n        try {\r\n            await loginLink.waitForClickable({ timeout: 10000 });\r\n            await loginLink.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), loginLink);\r\n        }\r\n    \r\n        // Wait for login modal inputs to appear\r\n        const emailInput = await $('#loginusername');\r\n        const passwordInput = await $('#loginpassword');\r\n    \r\n        // Input valid credentials\r\n        await emailInput.setValue('Reza Paramarta'); \r\n        await passwordInput.setValue('12345678');\r\n    \r\n        // Locate the \"Log in\" button in the modal\r\n        const loginButton = await $('//button[contains(@onclick, \"logIn()\")]');\r\n    \r\n        // Ensure the \"Log in\" button is clickable\r\n        await loginButton.waitForClickable({ timeout: 10000 });\r\n    \r\n        // Click the \"Log in\" button\r\n        await loginButton.click();\r\n    \r\n        // Pause to observe the behavior (optional)\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:46.135Z","end":"2024-09-30T08:02:53.950Z","_duration":7815,"type":"test","uid":"test-00-4","cid":"0-0","title":"Test Case 5 - Click Samsung Galaxy S6, check specification, and Add to Cart","fullTitle":"Sign up Page.Test Case 5 - Click Samsung Galaxy S6, check specification, and Add to Cart","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/index.html');\r\n    \r\n        // Define all elements in variable\r\n        const product = {\r\n            name: await $('//*[@id=\"tbodyid\"]/div[1]/div/div/h4/a'),\r\n            image: await $('//*[@id=\"imgp\"]/div/img'),\r\n            title: await $('//*[@id=\"tbodyid\"]/h2'),\r\n            price: await $('//*[@id=\"tbodyid\"]/h3'),\r\n            specs: await $('//*[@id=\"more-information\"]')\r\n        };\r\n    \r\n        // Click on the product name (Samsung Galaxy S6)\r\n        await product.name.click();\r\n    \r\n        // Assert product details\r\n        expect(await product.image.getAttribute('src')).toContain('galaxy_s6.jpg'); // Optimized expected value\r\n        expect(await product.title.getText()).toContain('Samsung galaxy s6');\r\n        expect(await product.price.getText()).toContain('$360 *includes tax');\r\n        \r\n        // Optimized spec assertions\r\n        const specsText = await product.specs.getText();\r\n        expect(specsText).toContain('The Samsung Galaxy S6 is powered by 1.5GHz octa-core Samsung Exynos 7420 processor and it comes with 3GB of RAM.');\r\n        expect(specsText).toContain('The phone packs 32GB of internal storage');\r\n\r\n        // Add to cart\r\n        const addToCartButton = await $('//*[@id=\"tbodyid\"]/div[2]/div/a');\r\n        await addToCartButton.click();\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:53.950Z","end":"2024-09-30T08:03:02.645Z","_duration":8695,"type":"test","uid":"test-00-5","cid":"0-0","title":"Test Case 6 - Click Navigation Menu Cart and ensure item is added to cart","fullTitle":"Sign up Page.Test Case 6 - Click Navigation Menu Cart and ensure item is added to cart","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        const cartButton = await $('//*[@id=\"cartur\"]');\r\n        await cartButton.click();\r\n\r\n        await browser.pause(8000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:02.645Z","end":"2024-09-30T08:03:05.728Z","_duration":3083,"type":"test","uid":"test-00-6","cid":"0-0","title":"Test Case 7 - Click Place Order to Purchase Item","fullTitle":"Sign up Page.Test Case 7 - Click Place Order to Purchase Item","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const placeOrderButton = await $('//*[@id=\"page-wrapper\"]/div/div[2]/button');\r\n        await placeOrderButton.click();\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:05.729Z","end":"2024-09-30T08:03:17.382Z","_duration":11653,"type":"test","uid":"test-00-7","cid":"0-0","title":"Test Case 8 - Fill all input fields and click Purchase button","fullTitle":"Sign up Page.Test Case 8 - Fill all input fields and click Purchase button","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const firstNameInput = await $('#name');\r\n        const countryNameInput = await $('#country');\r\n        const cityNameInput = await $('#city');\r\n        const creditCardInput = await $('#card');\r\n        const monthInput = await $('#month');\r\n        const yearInput = await $('#year');\r\n    \r\n        await firstNameInput.setValue('Reza');\r\n        await countryNameInput.setValue('Indonesia');\r\n        await cityNameInput.setValue('Jakarta');\r\n        await creditCardInput.setValue('4242424242424242');\r\n        await monthInput.setValue('12');\r\n        await yearInput.setValue('2024');\r\n    \r\n        const purchaseButton = await $('//*[@id=\"orderModal\"]/div/div/div[3]/button[2]');\r\n        await purchaseButton.click();\r\n        \r\n        // Wait for the dialog to appear\r\n        const sweetAlert = await $('.sweet-alert');\r\n        await sweetAlert.waitForDisplayed({ timeout: 5000 });\r\n    \r\n        // Capture the success message from the dialog\r\n        const modalMessage = await sweetAlert.$('h2').getText();\r\n        console.log('Modal Text:', modalMessage);\r\n        await browser.pause(5000);\r\n    \r\n        // Assert the success message\r\n        expect(modalMessage).toBe('Thank you for your purchase!');\r\n\r\n        // Click OK Button\r\n        const okButton = await $('.sweet-alert button.confirm');\r\n        await okButton.click();\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:17.383Z","end":"2024-09-30T08:03:27.594Z","_duration":10211,"type":"test","uid":"test-00-8","cid":"0-0","title":"Test Case 9 - Click About Us Navigation Menu check Detail and close dialog","fullTitle":"Sign up Page.Test Case 9 - Click About Us Navigation Menu check Detail and close dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        const aboutUsButton = await $('//*[@id=\"navbarExample\"]/ul/li[3]/a');\r\n        const closeButton = await $('//*[@id=\"videoModal\"]/div/div/div[3]/button');\r\n    \r\n        // Scroll to the \"About Us\" button and ensure it's displayed\r\n        await aboutUsButton.scrollIntoView();\r\n        await aboutUsButton.waitForDisplayed({ timeout: 10000 });\r\n    \r\n        // Try clicking the \"About Us\" button and handle click interception\r\n        try {\r\n            await aboutUsButton.waitForClickable({ timeout: 10000 });\r\n            await aboutUsButton.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), aboutUsButton);\r\n        }\r\n    \r\n        // Pause to observe the modal appearing\r\n        await browser.pause(5000);\r\n    \r\n        // Ensure the close button is clickable and close the modal\r\n        await closeButton.waitForClickable({ timeout: 10000 });\r\n        await closeButton.click();\r\n    \r\n        // Pause to observe the modal closing\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:27.595Z","end":"2024-09-30T08:03:33.265Z","_duration":5670,"type":"test","uid":"test-00-9","cid":"0-0","title":"Test Case 10 - should display Sony Vaio i5 after selecting Laptops category","fullTitle":"Sign up Page.Test Case 10 - should display Sony Vaio i5 after selecting Laptops category","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        // Open the webpage\r\n        await browser.url('/');\r\n        \r\n        // Click the Laptops category link\r\n        const laptopsCategory = await $('a[onclick=\"byCat(\\'notebook\\')\"]');\r\n        await laptopsCategory.click();\r\n        \r\n        // Wait for the products to load\r\n        await browser.pause(2000); // Adjust as needed based on page loading time\r\n        \r\n        // Check catalog for \"Sony Vaio i5\" is visible\r\n        const sonyVaioI5 = await $('a[href=\"prod.html?idp_=8\"]');\r\n        \r\n        // Expect that the product is displayed\r\n        await expect(sonyVaioI5).toBeDisplayed();\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:33.266Z","end":"2024-09-30T08:03:36.728Z","_duration":3462,"type":"test","uid":"test-00-10","cid":"0-0","title":"Test Case 11 - Log out","fullTitle":"Sign up Page.Test Case 11 - Log out","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const logOutLink = await $('#logout2');\r\n    \r\n        // Wait for the Log Out link to be displayed and clickable\r\n        await logOutLink.waitForDisplayed({ timeout: 10000 });\r\n        await logOutLink.scrollIntoView();\r\n    \r\n        // Sometimes elements may not be directly clickable due to overlay, so use a JS click if necessary\r\n        try {\r\n            await logOutLink.waitForClickable({ timeout: 10000 });\r\n            await logOutLink.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), logOutLink);\r\n        }\r\n    \r\n        await browser.pause(3000); // Pause to observe the behavior (optional)\r\n    }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","hooksAndTests":[{"start":"2024-09-30T08:02:31.017Z","end":"2024-09-30T08:02:37.252Z","_duration":6235,"type":"test","uid":"test-00-0","cid":"0-0","title":"Test Case 1 - Access the website and check the browser title","fullTitle":"Sign up Page.Test Case 1 - Access the website and check the browser title","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('https://www.demoblaze.com/');\r\n        \r\n        const title = await browser.getTitle();\r\n        console.log('The page title is:', title);  // Log the actual title for debugging\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:37.253Z","end":"2024-09-30T08:02:37.548Z","_duration":295,"type":"test","uid":"test-00-1","cid":"0-0","title":"Test Case 2 - Get the text of the navigation menu","fullTitle":"Sign up Page.Test Case 2 - Get the text of the navigation menu","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/');\r\n\r\n        const expectedLinks = [\r\n            'Home',\r\n            'Contact',\r\n            'About us',\r\n            'Cart',\r\n            'Log in',\r\n            'Sign up'\r\n        ];\r\n\r\n        const actualLinks = [];\r\n        const navlinks = await $$('.navbar-nav .nav-item a');\r\n        for (const link of navlinks) {\r\n            const text = await link.getText();\r\n            if (text.trim()) {  // Remove empty texts\r\n                actualLinks.push(text.trim().replace('(current)', '').trim());\r\n            }\r\n        }\r\n        \r\n        console.log('Actual Links:', actualLinks);\r\n        expect(actualLinks).toEqual(expectedLinks);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:37.549Z","end":"2024-09-30T08:02:41.412Z","_duration":3863,"type":"test","uid":"test-00-2","cid":"0-0","title":"Test Case 3 - Sign up with valid credentials and capture dialog","fullTitle":"Sign up Page.Test Case 3 - Sign up with valid credentials and capture dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/');\r\n    \r\n        const link = await $('#signin2');\r\n    \r\n        // Scroll to the element and ensure it is displayed and clickable\r\n        await link.scrollIntoView();\r\n        await link.waitForDisplayed({ timeout: 10000 });\r\n        \r\n        try {\r\n            await link.waitForClickable({ timeout: 10000 });\r\n            await link.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), link);\r\n        }\r\n    \r\n        const emailInput = await $('#sign-username');\r\n        const passwordInput = await $('#sign-password');\r\n    \r\n        // Generate a random username\r\n        const randomUsername = generateRandomUsername();\r\n        await emailInput.setValue(randomUsername); // Use random username\r\n        await passwordInput.setValue('12345678');\r\n    \r\n        // Locate the \"Sign up\" button in the modal\r\n        const signUpButton = await $('//button[contains(@onclick, \"register()\")]');\r\n    \r\n        // Ensure the \"Sign up\" button is clickable\r\n        await signUpButton.waitForClickable({ timeout: 10000 });\r\n    \r\n        // Click the \"Sign up\" button\r\n        await signUpButton.click();\r\n    \r\n        // Capture the success message from the modal (if it's a modal dialog)\r\n        const modalMessage = await $('div.modal-body').getText();\r\n        console.log('Modal Text:', modalMessage);\r\n    \r\n        // Assert the text (adjust the expectation based on actual success message)\r\n        expect(modalMessage).toContain('');  // Adjust this based on expected modal message\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:41.413Z","end":"2024-09-30T08:02:46.134Z","_duration":4721,"type":"test","uid":"test-00-3","cid":"0-0","title":"Test Case 4 - Log in with valid credentials and capture dialog","fullTitle":"Sign up Page.Test Case 4 - Log in with valid credentials and capture dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        await browser.url('/');\r\n    \r\n        const loginLink = await $('#login2');\r\n    \r\n        // Wait for the element to be displayed and clickable\r\n        await loginLink.waitForDisplayed({ timeout: 10000 });\r\n        await loginLink.scrollIntoView();\r\n    \r\n        // Sometimes images or other elements may be blocking the login link, so execute a JS click if necessary\r\n        try {\r\n            await loginLink.waitForClickable({ timeout: 10000 });\r\n            await loginLink.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), loginLink);\r\n        }\r\n    \r\n        // Wait for login modal inputs to appear\r\n        const emailInput = await $('#loginusername');\r\n        const passwordInput = await $('#loginpassword');\r\n    \r\n        // Input valid credentials\r\n        await emailInput.setValue('Reza Paramarta'); \r\n        await passwordInput.setValue('12345678');\r\n    \r\n        // Locate the \"Log in\" button in the modal\r\n        const loginButton = await $('//button[contains(@onclick, \"logIn()\")]');\r\n    \r\n        // Ensure the \"Log in\" button is clickable\r\n        await loginButton.waitForClickable({ timeout: 10000 });\r\n    \r\n        // Click the \"Log in\" button\r\n        await loginButton.click();\r\n    \r\n        // Pause to observe the behavior (optional)\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:46.135Z","end":"2024-09-30T08:02:53.950Z","_duration":7815,"type":"test","uid":"test-00-4","cid":"0-0","title":"Test Case 5 - Click Samsung Galaxy S6, check specification, and Add to Cart","fullTitle":"Sign up Page.Test Case 5 - Click Samsung Galaxy S6, check specification, and Add to Cart","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        await browser.url('/index.html');\r\n    \r\n        // Define all elements in variable\r\n        const product = {\r\n            name: await $('//*[@id=\"tbodyid\"]/div[1]/div/div/h4/a'),\r\n            image: await $('//*[@id=\"imgp\"]/div/img'),\r\n            title: await $('//*[@id=\"tbodyid\"]/h2'),\r\n            price: await $('//*[@id=\"tbodyid\"]/h3'),\r\n            specs: await $('//*[@id=\"more-information\"]')\r\n        };\r\n    \r\n        // Click on the product name (Samsung Galaxy S6)\r\n        await product.name.click();\r\n    \r\n        // Assert product details\r\n        expect(await product.image.getAttribute('src')).toContain('galaxy_s6.jpg'); // Optimized expected value\r\n        expect(await product.title.getText()).toContain('Samsung galaxy s6');\r\n        expect(await product.price.getText()).toContain('$360 *includes tax');\r\n        \r\n        // Optimized spec assertions\r\n        const specsText = await product.specs.getText();\r\n        expect(specsText).toContain('The Samsung Galaxy S6 is powered by 1.5GHz octa-core Samsung Exynos 7420 processor and it comes with 3GB of RAM.');\r\n        expect(specsText).toContain('The phone packs 32GB of internal storage');\r\n\r\n        // Add to cart\r\n        const addToCartButton = await $('//*[@id=\"tbodyid\"]/div[2]/div/a');\r\n        await addToCartButton.click();\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:02:53.950Z","end":"2024-09-30T08:03:02.645Z","_duration":8695,"type":"test","uid":"test-00-5","cid":"0-0","title":"Test Case 6 - Click Navigation Menu Cart and ensure item is added to cart","fullTitle":"Sign up Page.Test Case 6 - Click Navigation Menu Cart and ensure item is added to cart","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        const cartButton = await $('//*[@id=\"cartur\"]');\r\n        await cartButton.click();\r\n\r\n        await browser.pause(8000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:02.645Z","end":"2024-09-30T08:03:05.728Z","_duration":3083,"type":"test","uid":"test-00-6","cid":"0-0","title":"Test Case 7 - Click Place Order to Purchase Item","fullTitle":"Sign up Page.Test Case 7 - Click Place Order to Purchase Item","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const placeOrderButton = await $('//*[@id=\"page-wrapper\"]/div/div[2]/button');\r\n        await placeOrderButton.click();\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:05.729Z","end":"2024-09-30T08:03:17.382Z","_duration":11653,"type":"test","uid":"test-00-7","cid":"0-0","title":"Test Case 8 - Fill all input fields and click Purchase button","fullTitle":"Sign up Page.Test Case 8 - Fill all input fields and click Purchase button","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const firstNameInput = await $('#name');\r\n        const countryNameInput = await $('#country');\r\n        const cityNameInput = await $('#city');\r\n        const creditCardInput = await $('#card');\r\n        const monthInput = await $('#month');\r\n        const yearInput = await $('#year');\r\n    \r\n        await firstNameInput.setValue('Reza');\r\n        await countryNameInput.setValue('Indonesia');\r\n        await cityNameInput.setValue('Jakarta');\r\n        await creditCardInput.setValue('4242424242424242');\r\n        await monthInput.setValue('12');\r\n        await yearInput.setValue('2024');\r\n    \r\n        const purchaseButton = await $('//*[@id=\"orderModal\"]/div/div/div[3]/button[2]');\r\n        await purchaseButton.click();\r\n        \r\n        // Wait for the dialog to appear\r\n        const sweetAlert = await $('.sweet-alert');\r\n        await sweetAlert.waitForDisplayed({ timeout: 5000 });\r\n    \r\n        // Capture the success message from the dialog\r\n        const modalMessage = await sweetAlert.$('h2').getText();\r\n        console.log('Modal Text:', modalMessage);\r\n        await browser.pause(5000);\r\n    \r\n        // Assert the success message\r\n        expect(modalMessage).toBe('Thank you for your purchase!');\r\n\r\n        // Click OK Button\r\n        const okButton = await $('.sweet-alert button.confirm');\r\n        await okButton.click();\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:17.383Z","end":"2024-09-30T08:03:27.594Z","_duration":10211,"type":"test","uid":"test-00-8","cid":"0-0","title":"Test Case 9 - Click About Us Navigation Menu check Detail and close dialog","fullTitle":"Sign up Page.Test Case 9 - Click About Us Navigation Menu check Detail and close dialog","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => { \r\n        const aboutUsButton = await $('//*[@id=\"navbarExample\"]/ul/li[3]/a');\r\n        const closeButton = await $('//*[@id=\"videoModal\"]/div/div/div[3]/button');\r\n    \r\n        // Scroll to the \"About Us\" button and ensure it's displayed\r\n        await aboutUsButton.scrollIntoView();\r\n        await aboutUsButton.waitForDisplayed({ timeout: 10000 });\r\n    \r\n        // Try clicking the \"About Us\" button and handle click interception\r\n        try {\r\n            await aboutUsButton.waitForClickable({ timeout: 10000 });\r\n            await aboutUsButton.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), aboutUsButton);\r\n        }\r\n    \r\n        // Pause to observe the modal appearing\r\n        await browser.pause(5000);\r\n    \r\n        // Ensure the close button is clickable and close the modal\r\n        await closeButton.waitForClickable({ timeout: 10000 });\r\n        await closeButton.click();\r\n    \r\n        // Pause to observe the modal closing\r\n        await browser.pause(5000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:27.595Z","end":"2024-09-30T08:03:33.265Z","_duration":5670,"type":"test","uid":"test-00-9","cid":"0-0","title":"Test Case 10 - should display Sony Vaio i5 after selecting Laptops category","fullTitle":"Sign up Page.Test Case 10 - should display Sony Vaio i5 after selecting Laptops category","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        // Open the webpage\r\n        await browser.url('/');\r\n        \r\n        // Click the Laptops category link\r\n        const laptopsCategory = await $('a[onclick=\"byCat(\\'notebook\\')\"]');\r\n        await laptopsCategory.click();\r\n        \r\n        // Wait for the products to load\r\n        await browser.pause(2000); // Adjust as needed based on page loading time\r\n        \r\n        // Check catalog for \"Sony Vaio i5\" is visible\r\n        const sonyVaioI5 = await $('a[href=\"prod.html?idp_=8\"]');\r\n        \r\n        // Expect that the product is displayed\r\n        await expect(sonyVaioI5).toBeDisplayed();\r\n        await browser.pause(3000);\r\n    }","events":[],"errorIndex":0},{"start":"2024-09-30T08:03:33.266Z","end":"2024-09-30T08:03:36.728Z","_duration":3462,"type":"test","uid":"test-00-10","cid":"0-0","title":"Test Case 11 - Log out","fullTitle":"Sign up Page.Test Case 11 - Log out","output":[],"retries":0,"parent":"Sign up Page","state":"passed","body":"async () => {\r\n        const logOutLink = await $('#logout2');\r\n    \r\n        // Wait for the Log Out link to be displayed and clickable\r\n        await logOutLink.waitForDisplayed({ timeout: 10000 });\r\n        await logOutLink.scrollIntoView();\r\n    \r\n        // Sometimes elements may not be directly clickable due to overlay, so use a JS click if necessary\r\n        try {\r\n            await logOutLink.waitForClickable({ timeout: 10000 });\r\n            await logOutLink.click(); // Regular click attempt\r\n        } catch (error) {\r\n            // Use JS click if the regular click fails due to interception\r\n            await browser.execute((el) => el.click(), logOutLink);\r\n        }\r\n    \r\n        await browser.pause(3000); // Pause to observe the behavior (optional)\r\n    }","events":[],"errorIndex":0}]}],"reportFile":"D:\\TestQAAkhdani\\reports\\html-reports\\report-0-0.html","browserName":"not specified"}